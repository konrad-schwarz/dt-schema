# SPDX-License-Identifier: BSD-2-Clause
# Copyright 2018 Linaro Ltd.
# Copyright 2018-2019 Arm Ltd.
%YAML 1.2
---
$id: "http://devicetree.org/meta-schemas/core.yaml#"
$schema: https://json-schema.org/draft/2019-09/schema
description: "Metaschema for devicetree binding documentation"

allOf:
  - $ref: "http://devicetree.org/meta-schemas/base.yaml#"
  - description: Either unevaluatedProperties or additionalProperties must be present
    oneOf:
      - required: [ unevaluatedProperties ]
      - required: [ additionalProperties ]

definitions:
  all-properties:
    allOf:
      - $ref: "#/definitions/core-properties"
      - $ref: "clocks.yaml#"
      - $ref: "dma.yaml#"
      - $ref: "gpios.yaml#"
      - $ref: "hwlock.yaml#"
      - $ref: "iio.yaml#"
      - $ref: "interrupts.yaml#"
      - $ref: "iommu.yaml#"
      - $ref: "mailbox.yaml#"
      - $ref: "nvmem.yaml#"
      - $ref: "phy.yaml#"
      - $ref: "power-domain.yaml#"
      - $ref: "pwm.yaml#"
      - $ref: "reset.yaml#"
      - $ref: "mailbox.yaml#"
      - $ref: "vendor-props.yaml#"
  core-properties:
    properties:
      # ranges is an array of cells
      ranges:
        $ref: "cell.yaml#/array"
      reg:
        $ref: "cell.yaml#/array"
        # compatible is a list of strings
      compatible:
        $ref: "string-array.yaml"
       
       # why does nodename start with a $?, and why is it an array
      $nodename:
        $ref: "string-array.yaml"

      # I actually don't know what a memory-region is
      memory-region:
        $ref: "cell.yaml#/array"
        
      memory-region-names:
        $ref: "string-array.yaml"
        
        
    patternProperties:
       # anything that ends with -name is a string-array; regex is longer than necessary
      '.*-names$':
        $ref: "string-array.yaml"
  
  # all the #*-cells properties are a single cell
      '^#.*-cells$': 
        $ref: "cell.yaml#/single"

      # supply-nodes can have a description and a deprecated node
      '-supply$':
        propertyNames:
          enum: [ description, deprecated ]

      '-(bits|-kBps|percent|bp|mhz|hz|sec|ms|us|ns|ps|mm|microamp(-hours)?|(micro-)?ohms|microwatt-hours|microvolt|(femto|pico)farads|(milli)?celsius|kelvin|kpascal)$':
        allOf:
          - $ref: "cell.yaml#/array"
          - description: Standard unit suffix properties don't need a type $ref
            propertyNames:
              not:
                const: $ref

      '^.*$':
        properties:
          # 'boolean' and 'object' are the only native types allowed
          type:
            enum: [ boolean, object ]
          properties:
            $ref: "#/definitions/all-properties"
          patternProperties:
            $ref: "#/definitions/all-properties"
          $ref:
            pattern: '(#$|#\/)?'

        allOf:
          - if:
              type: object
              properties:
                type:
                  const: object
              required:
                - type
            then:
              $ref: "nodes.yaml#"
          - if:
              required: [ properties ]
            then:
              description: node schemas must have a type or $ref
              anyOf:
                - required: [ type ]
                - required: [ $ref ]

    dependentRequired:
      "#size-cells": [ "#address-cells" ]
      memory-region-names: [ memory-region ]
      reg-names: [ reg ]

properties:
  patternProperties:
    $ref: "#/definitions/all-properties"
  properties:
    $ref: "#/definitions/all-properties"
  allOf:
    items:
      properties:
        properties:
          $ref: "#/definitions/all-properties"
        patternProperties:
          $ref: "#/definitions/all-properties"
  anyOf:
    items:
      properties:
        properties:
          $ref: "#/definitions/all-properties"
        patternProperties:
          $ref: "#/definitions/all-properties"
  oneOf:
    items:
      properties:
        properties:
          $ref: "#/definitions/all-properties"
        patternProperties:
          $ref: "#/definitions/all-properties"
  if:
    properties:
      properties:
        $ref: "#/definitions/all-properties"
      patternProperties:
        $ref: "#/definitions/all-properties"

# a description must have either properties or patternProperties
anyOf:
  - required:
      - properties
  - required:
      - patternProperties
